# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: "Docker Multi-Arch Build and Push – caddy-aio-proxy"
run-name: ${{ github.actor }} - building and pushing Docker images – caddy-aio-proxy

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

permissions:
  contents: "read"
  packages: "write"
  pull-requests: "read"

on:
  push:
    branches: ["*"]
    tags: ["*"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch:

env:
  # Base image name (no registry). Adjust if you need a different basename.
  IMAGE_BASENAME: "caddy-aio-proxy"
  # Build settings
  DOCKERFILE_PATH: "./Dockerfile"
  BUILD_CONTEXT: "."

jobs:
  build-and-push:
    name: "Build and Push (linux/amd64, linux/arm64)"
    if: ${{ success() || failure() }}
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        if: ${{ success() || failure() }}
        with:
          fetch-depth: 0

      - name: "Set up QEMU"
        uses: "docker/setup-qemu-action@v3"
        if: ${{ success() || failure() }}
        with:
          platforms: "arm64"

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
        if: ${{ success() || failure() }}

      # Set token variables with robust fallbacks
      - name: "Set Docker token variables"
        id: set-tokens
        shell: bash
        run: |
          # GitHub token with fallbacks
          echo "GITHUB_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN || secrets.GITHUB_PERSONAL_ACCESS_TOKEN || '' }}" >> $GITHUB_ENV

          # Docker token with fallbacks
          echo "DOCKER_TOKEN=${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_ACCESS_TOKEN || secrets.DOCKER_HUB_TOKEN || secrets.DOCKER_TOKEN || '' }}" >> $GITHUB_ENV

          # Docker username with fallbacks
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME || github.repository_owner }}" >> $GITHUB_ENV

          # Docker auth flag
          if [[ -n "${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_ACCESS_TOKEN || secrets.DOCKER_HUB_TOKEN || secrets.DOCKER_TOKEN || '' }}" ]]; then
            echo "DOCKERHUB_AUTH=true" >> $GITHUB_ENV
          else
            echo "DOCKERHUB_AUTH=false" >> $GITHUB_ENV
          fi

      - name: "Log in to GitHub Container Registry"
        uses: "docker/login-action@v3"
        if: ${{ success() || failure() }}
        with:
          registry: "ghcr.io"
          username: "${{ github.repository_owner }}"
          password: "${{ env.GITHUB_AUTH_TOKEN }}"

      - name: "Log in to Docker Hub (if secrets present)"
        if: env.DOCKERHUB_AUTH == 'true'
        uses: "docker/login-action@v3"
        with:
          username: "${{ env.DOCKER_USERNAME }}"
          password: "${{ env.DOCKER_TOKEN }}"

      - name: "Extract Docker metadata"
        id: "meta"
        uses: "docker/metadata-action@v5"
        if: ${{ success() || failure() }}
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_BASENAME }}
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_BASENAME }}
          tags: |
            # For release tags: apply the version tag and mark as latest
            type=semver,pattern={{version}}
            type=semver,pattern=latest
            # For default branch (main/master): apply dev tag
            type=raw,value=dev,enable=${{ github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            # For branch pushes: apply the branch name as tag
            type=ref,event=branch,prefix=
            # For PRs: apply pr-{number} tag
            type=ref,event=pr

      - name: "Build and push Docker image (multi-arch)"
        uses: "docker/build-push-action@v6"
        if: ${{ success() || failure() }}
        with:
          context: "${{ env.BUILD_CONTEXT }}"
          file: "${{ env.DOCKERFILE_PATH }}"
          platforms: "linux/amd64,linux/arm64"
          tags: "${{ steps.meta.outputs.tags }}"
          labels: "${{ steps.meta.outputs.labels }}"
          push: true
          provenance: false
          sbom: false
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
